// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/getamis/alice/crypto/zkproof/message.proto

package zkproof

import (
	fmt "fmt"
	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IntegerFactorizationProofMessage struct {
	Salt                 []byte   `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	X                    []byte   `protobuf:"bytes,3,opt,name=x,proto3" json:"x,omitempty"`
	Y                    []byte   `protobuf:"bytes,4,opt,name=y,proto3" json:"y,omitempty"`
	Z                    []byte   `protobuf:"bytes,5,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegerFactorizationProofMessage) Reset()         { *m = IntegerFactorizationProofMessage{} }
func (m *IntegerFactorizationProofMessage) String() string { return proto.CompactTextString(m) }
func (*IntegerFactorizationProofMessage) ProtoMessage()    {}
func (*IntegerFactorizationProofMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7463df78901cfd5c, []int{0}
}

func (m *IntegerFactorizationProofMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerFactorizationProofMessage.Unmarshal(m, b)
}
func (m *IntegerFactorizationProofMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerFactorizationProofMessage.Marshal(b, m, deterministic)
}
func (m *IntegerFactorizationProofMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerFactorizationProofMessage.Merge(m, src)
}
func (m *IntegerFactorizationProofMessage) XXX_Size() int {
	return xxx_messageInfo_IntegerFactorizationProofMessage.Size(m)
}
func (m *IntegerFactorizationProofMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerFactorizationProofMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerFactorizationProofMessage proto.InternalMessageInfo

func (m *IntegerFactorizationProofMessage) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *IntegerFactorizationProofMessage) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *IntegerFactorizationProofMessage) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *IntegerFactorizationProofMessage) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *IntegerFactorizationProofMessage) GetZ() []byte {
	if m != nil {
		return m.Z
	}
	return nil
}

type SchnorrProofMessage struct {
	Salt                 []byte                          `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	V                    *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,2,opt,name=V,proto3" json:"V,omitempty"`
	Alpha                *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
	U                    []byte                          `protobuf:"bytes,4,opt,name=u,proto3" json:"u,omitempty"`
	T                    []byte                          `protobuf:"bytes,5,opt,name=t,proto3" json:"t,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SchnorrProofMessage) Reset()         { *m = SchnorrProofMessage{} }
func (m *SchnorrProofMessage) String() string { return proto.CompactTextString(m) }
func (*SchnorrProofMessage) ProtoMessage()    {}
func (*SchnorrProofMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7463df78901cfd5c, []int{1}
}

func (m *SchnorrProofMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchnorrProofMessage.Unmarshal(m, b)
}
func (m *SchnorrProofMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchnorrProofMessage.Marshal(b, m, deterministic)
}
func (m *SchnorrProofMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchnorrProofMessage.Merge(m, src)
}
func (m *SchnorrProofMessage) XXX_Size() int {
	return xxx_messageInfo_SchnorrProofMessage.Size(m)
}
func (m *SchnorrProofMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SchnorrProofMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SchnorrProofMessage proto.InternalMessageInfo

func (m *SchnorrProofMessage) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *SchnorrProofMessage) GetV() *ecpointgrouplaw.EcPointMessage {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *SchnorrProofMessage) GetAlpha() *ecpointgrouplaw.EcPointMessage {
	if m != nil {
		return m.Alpha
	}
	return nil
}

func (m *SchnorrProofMessage) GetU() []byte {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *SchnorrProofMessage) GetT() []byte {
	if m != nil {
		return m.T
	}
	return nil
}

func init() {
	proto.RegisterType((*IntegerFactorizationProofMessage)(nil), "zkproof.IntegerFactorizationProofMessage")
	proto.RegisterType((*SchnorrProofMessage)(nil), "zkproof.SchnorrProofMessage")
}

func init() {
	proto.RegisterFile("github.com/getamis/alice/crypto/zkproof/message.proto", fileDescriptor_7463df78901cfd5c)
}

var fileDescriptor_7463df78901cfd5c = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x89, 0xb6, 0x8a, 0xb1, 0xa7, 0x78, 0x09, 0x22, 0x58, 0x7a, 0xf2, 0xe2, 0x06, 0x94,
	0x9e, 0x3c, 0x2b, 0x88, 0x08, 0xa5, 0x42, 0xef, 0xd9, 0x10, 0xb3, 0xc1, 0xec, 0x4e, 0xc8, 0x4e,
	0xb0, 0xbb, 0x07, 0xff, 0x90, 0x7f, 0x52, 0x92, 0xb4, 0x08, 0x5e, 0xea, 0x2d, 0xdf, 0x9b, 0xbc,
	0x79, 0x2f, 0xa1, 0x4b, 0x63, 0xb1, 0x89, 0x75, 0xa5, 0xa0, 0x15, 0x46, 0xa3, 0x6c, 0x6d, 0x2f,
	0xa4, 0xb3, 0x4a, 0x0b, 0x15, 0x06, 0x8f, 0x20, 0xc6, 0x0f, 0x1f, 0x00, 0xde, 0x45, 0xab, 0xfb,
	0x5e, 0x1a, 0x5d, 0xf9, 0x00, 0x08, 0xec, 0x74, 0x27, 0x5f, 0x3e, 0x1c, 0xf2, 0x6b, 0xe5, 0xc1,
	0x76, 0x68, 0x02, 0x44, 0xef, 0xe4, 0xa7, 0xc8, 0x54, 0xb6, 0x2c, 0xbe, 0xe8, 0xfc, 0xb9, 0x43,
	0x6d, 0x74, 0x78, 0x92, 0x0a, 0x21, 0xd8, 0x51, 0xa2, 0x85, 0x6e, 0x95, 0x36, 0xbf, 0x96, 0x3c,
	0xc6, 0xe8, 0xa4, 0x97, 0x0e, 0x39, 0x99, 0x93, 0x9b, 0xd9, 0x3a, 0x9f, 0xd9, 0x15, 0x3d, 0xf3,
	0xb1, 0x76, 0x56, 0xbd, 0xe8, 0x81, 0x1f, 0xe5, 0xc1, 0xaf, 0xc0, 0x66, 0x94, 0x6c, 0xf9, 0x71,
	0x56, 0xc9, 0x36, 0xd1, 0xc0, 0x27, 0x85, 0xf2, 0x6c, 0xe4, 0xd3, 0x42, 0xe3, 0xe2, 0x9b, 0xd0,
	0x8b, 0x37, 0xd5, 0x74, 0x10, 0xc2, 0xc1, 0xcc, 0x5b, 0x4a, 0x36, 0x39, 0xeb, 0xfc, 0xee, 0xba,
	0xfa, 0xf3, 0xa8, 0xea, 0x51, 0xad, 0x12, 0xef, 0xfc, 0x6b, 0xb2, 0x61, 0x4b, 0x3a, 0x95, 0xce,
	0x37, 0x32, 0x17, 0xf9, 0x87, 0xa5, 0xdc, 0x4e, 0xfd, 0xe2, 0xbe, 0x6d, 0x4c, 0x84, 0xfb, 0xb6,
	0x58, 0x9f, 0xe4, 0x4f, 0xbb, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x19, 0xc2, 0x4e, 0x24, 0xb3,
	0x01, 0x00, 0x00,
}
